/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import data.Data;
import designpatterns.config.PropertiesManager;
import designpatterns.structure.Method;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author bruno
 */
public class ResultsArtifactsForm extends javax.swing.JFrame {

    /**
     * Creates new form ResultsArtifactsForm
     */
    public ResultsArtifactsForm() {
        this.data = Data.getInstance();
        this.properties = PropertiesManager.getInstance().getProperties();
        this.intersection = new ArrayList<>();
        this.nameDesignPattern = new ArrayList<>();
        initComponents();
        updatePages();
        verifyStateButtons();
        updateHighlighter();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelMain = new javax.swing.JPanel();
        jPanelFilter = new javax.swing.JPanel();
        jButtonFilter = new javax.swing.JButton();
        jCheckBoxAdapterCommand = new javax.swing.JCheckBox();
        jCheckBoxBridge = new javax.swing.JCheckBox();
        jCheckBoxComposite = new javax.swing.JCheckBox();
        jCheckBoxDecorator = new javax.swing.JCheckBox();
        jCheckBoxFactoryMethod = new javax.swing.JCheckBox();
        jCheckBoxObserver = new javax.swing.JCheckBox();
        jCheckBoxPrototype = new javax.swing.JCheckBox();
        jCheckBoxProxy = new javax.swing.JCheckBox();
        jCheckBoxProxy2 = new javax.swing.JCheckBox();
        jCheckBoxSingleton = new javax.swing.JCheckBox();
        jCheckBoxStateStrategy = new javax.swing.JCheckBox();
        jCheckBoxTemplateMethod = new javax.swing.JCheckBox();
        jCheckBoxVisitor = new javax.swing.JCheckBox();
        jButtonSelect = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableArtifacts = new javax.swing.JTable();
        jButtonPrevious = new javax.swing.JButton();
        jButtonNext = new javax.swing.JButton();
        jLabelHighlighter = new javax.swing.JLabel();
        jButtonExport = new javax.swing.JButton();

        jPanelMain.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanelFilter.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter"));

        jButtonFilter.setText("Filter");
        jButtonFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFilterActionPerformed(evt);
            }
        });

        jCheckBoxAdapterCommand.setText("(Object)Adapter-Command");
        jCheckBoxAdapterCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAdapterCommandActionPerformed(evt);
            }
        });

        jCheckBoxBridge.setText("Bridge");
        jCheckBoxBridge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxBridgeActionPerformed(evt);
            }
        });

        jCheckBoxComposite.setText("Composite");
        jCheckBoxComposite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxCompositeActionPerformed(evt);
            }
        });

        jCheckBoxDecorator.setText("Decorator");
        jCheckBoxDecorator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxDecoratorActionPerformed(evt);
            }
        });

        jCheckBoxFactoryMethod.setText("Factory Method");
        jCheckBoxFactoryMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxFactoryMethodActionPerformed(evt);
            }
        });

        jCheckBoxObserver.setText("Observer");
        jCheckBoxObserver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxObserverActionPerformed(evt);
            }
        });

        jCheckBoxPrototype.setText("Prototype");
        jCheckBoxPrototype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxPrototypeActionPerformed(evt);
            }
        });

        jCheckBoxProxy.setText("Proxy");
        jCheckBoxProxy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxProxyActionPerformed(evt);
            }
        });

        jCheckBoxProxy2.setText("Proxy2");
        jCheckBoxProxy2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxProxy2ActionPerformed(evt);
            }
        });

        jCheckBoxSingleton.setText("Singleton");
        jCheckBoxSingleton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSingletonActionPerformed(evt);
            }
        });

        jCheckBoxStateStrategy.setText("State-Strategy");
        jCheckBoxStateStrategy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxStateStrategyActionPerformed(evt);
            }
        });

        jCheckBoxTemplateMethod.setText("Template Method");
        jCheckBoxTemplateMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxTemplateMethodActionPerformed(evt);
            }
        });

        jCheckBoxVisitor.setText("Visitor");
        jCheckBoxVisitor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxVisitorActionPerformed(evt);
            }
        });

        jButtonSelect.setText("Deselect All");
        jButtonSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelFilterLayout = new javax.swing.GroupLayout(jPanelFilter);
        jPanelFilter.setLayout(jPanelFilterLayout);
        jPanelFilterLayout.setHorizontalGroup(
            jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelFilterLayout.createSequentialGroup()
                        .addComponent(jButtonSelect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonFilter))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelFilterLayout.createSequentialGroup()
                        .addComponent(jCheckBoxSingleton)
                        .addGap(93, 93, 93)
                        .addComponent(jCheckBoxStateStrategy)
                        .addGap(84, 84, 84)
                        .addComponent(jCheckBoxTemplateMethod)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxVisitor))
                    .addGroup(jPanelFilterLayout.createSequentialGroup()
                        .addComponent(jCheckBoxAdapterCommand)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxDecorator))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelFilterLayout.createSequentialGroup()
                        .addGroup(jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanelFilterLayout.createSequentialGroup()
                                .addComponent(jCheckBoxBridge)
                                .addGap(85, 85, 85)
                                .addComponent(jCheckBoxComposite))
                            .addGroup(jPanelFilterLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jCheckBoxFactoryMethod)
                                .addGap(56, 56, 56)
                                .addComponent(jCheckBoxObserver)
                                .addGap(55, 55, 55)
                                .addComponent(jCheckBoxPrototype)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                                .addComponent(jCheckBoxProxy)))
                        .addGap(61, 61, 61)
                        .addComponent(jCheckBoxProxy2)
                        .addGap(42, 42, 42)))
                .addContainerGap())
        );
        jPanelFilterLayout.setVerticalGroup(
            jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxAdapterCommand)
                    .addComponent(jCheckBoxBridge)
                    .addComponent(jCheckBoxComposite)
                    .addComponent(jCheckBoxDecorator))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxFactoryMethod)
                    .addComponent(jCheckBoxObserver)
                    .addComponent(jCheckBoxPrototype)
                    .addComponent(jCheckBoxProxy)
                    .addComponent(jCheckBoxProxy2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxTemplateMethod)
                    .addComponent(jCheckBoxVisitor)
                    .addComponent(jCheckBoxSingleton)
                    .addComponent(jCheckBoxStateStrategy))
                .addGap(10, 10, 10)
                .addGroup(jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSelect)
                    .addComponent(jButtonFilter))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("DetectionStrategies"));

        jTableArtifacts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Título 4", "Title 5"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableArtifacts.setUpdateSelectionOnSort(false);
        jScrollPane1.setViewportView(jTableArtifacts);
        initializeFilter();
        checkAllChecks(true);
        changeNameButtonSelect();
        convertToList();
        tableResults();

        jButtonPrevious.setFont(new java.awt.Font("Dialog", 1, 8)); // NOI18N
        jButtonPrevious.setText("<<");
        jButtonPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPreviousActionPerformed(evt);
            }
        });

        jButtonNext.setFont(new java.awt.Font("Dialog", 1, 8)); // NOI18N
        jButtonNext.setText(">>");
        jButtonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextActionPerformed(evt);
            }
        });

        jLabelHighlighter.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelHighlighter.setText("jLabel1");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonPrevious)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelHighlighter, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonNext)
                .addGap(269, 269, 269))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPrevious)
                    .addComponent(jButtonNext)
                    .addComponent(jLabelHighlighter))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jButtonExport.setText("Export");
        jButtonExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelMainLayout = new javax.swing.GroupLayout(jPanelMain);
        jPanelMain.setLayout(jPanelMainLayout);
        jPanelMainLayout.setHorizontalGroup(
            jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMainLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonExport)
                        .addGap(8, 8, 8)))
                .addContainerGap())
        );
        jPanelMainLayout.setVerticalGroup(
            jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonExport)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 41, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPreviousActionPerformed
        this.pageCurrent--;
        update();
        this.jButtonNext.setEnabled(true);
    }//GEN-LAST:event_jButtonPreviousActionPerformed

    private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextActionPerformed
        this.pageCurrent++;
        update();
        this.jButtonPrevious.setEnabled(true);
    }//GEN-LAST:event_jButtonNextActionPerformed

    private void jButtonExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportActionPerformed
        JFileChooser jfileChooser = new JFileChooser();
        int returnVal = jfileChooser.showSaveDialog(this);
        int confirm = 0;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                File xls = jfileChooser.getSelectedFile();
                xls.createNewFile();
                confirm = toExcel(this.jTableArtifacts, xls);
            } catch (IOException ex) {
                Logger.getLogger(ResultsArtifactsForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (confirm == 1) {
            JOptionPane.showMessageDialog(this, this.properties.getProperty("confirmationExportArtifacts"), this.properties.getProperty("titleConfirmation"), JOptionPane.INFORMATION_MESSAGE, null);
        } else {
            JOptionPane.showMessageDialog(this, this.properties.getProperty("errorExportArtifacts"), this.properties.getProperty("titleError"), JOptionPane.ERROR_MESSAGE, null);
        }
    }//GEN-LAST:event_jButtonExportActionPerformed

    private void jButtonSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectActionPerformed
        if (!this.selectedAll) {
            checkAllChecks(true);
            this.filter.clear();
            initializeFilter();
            this.selectedAll = true;
            changeNameButtonSelect();
        } else {
            checkAllChecks(false);
            this.filter.clear();
            this.selectedAll = false;
            changeNameButtonSelect();
        }
    }//GEN-LAST:event_jButtonSelectActionPerformed

    private void jCheckBoxVisitorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxVisitorActionPerformed
        if (jCheckBoxVisitor.isSelected()) {
            this.filter.add(evt.getActionCommand());
        } else {
            this.filter.remove(evt.getActionCommand());
        }
    }//GEN-LAST:event_jCheckBoxVisitorActionPerformed

    private void jCheckBoxTemplateMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxTemplateMethodActionPerformed
        if (jCheckBoxTemplateMethod.isSelected()) {
            this.filter.add(evt.getActionCommand());
        } else {
            this.filter.remove(evt.getActionCommand());
        }
    }//GEN-LAST:event_jCheckBoxTemplateMethodActionPerformed

    private void jCheckBoxStateStrategyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxStateStrategyActionPerformed
        if (jCheckBoxStateStrategy.isSelected()) {
            this.filter.add(evt.getActionCommand());
        } else {
            this.filter.remove(evt.getActionCommand());
        }
    }//GEN-LAST:event_jCheckBoxStateStrategyActionPerformed

    private void jCheckBoxSingletonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSingletonActionPerformed
        if (jCheckBoxSingleton.isSelected()) {
            this.filter.add(evt.getActionCommand());
        } else {
            this.filter.remove(evt.getActionCommand());
        }
    }//GEN-LAST:event_jCheckBoxSingletonActionPerformed

    private void jCheckBoxProxy2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxProxy2ActionPerformed
        if (jCheckBoxProxy2.isSelected()) {
            this.filter.add(evt.getActionCommand());
        } else {
            this.filter.remove(evt.getActionCommand());
        }
    }//GEN-LAST:event_jCheckBoxProxy2ActionPerformed

    private void jCheckBoxProxyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxProxyActionPerformed
        if (jCheckBoxProxy.isSelected()) {
            this.filter.add(evt.getActionCommand());
        } else {
            this.filter.remove(evt.getActionCommand());
        }
    }//GEN-LAST:event_jCheckBoxProxyActionPerformed

    private void jCheckBoxPrototypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxPrototypeActionPerformed
        if (jCheckBoxPrototype.isSelected()) {
            this.filter.add(evt.getActionCommand());
        } else {
            this.filter.remove(evt.getActionCommand());
        }
    }//GEN-LAST:event_jCheckBoxPrototypeActionPerformed

    private void jCheckBoxObserverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxObserverActionPerformed
        if (jCheckBoxObserver.isSelected()) {
            this.filter.add(evt.getActionCommand());
        } else {
            this.filter.remove(evt.getActionCommand());
        }
    }//GEN-LAST:event_jCheckBoxObserverActionPerformed

    private void jCheckBoxFactoryMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxFactoryMethodActionPerformed
        if (jCheckBoxFactoryMethod.isSelected()) {
            this.filter.add(evt.getActionCommand());
        } else {
            this.filter.remove(evt.getActionCommand());
        }
    }//GEN-LAST:event_jCheckBoxFactoryMethodActionPerformed

    private void jCheckBoxDecoratorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxDecoratorActionPerformed
        if (jCheckBoxDecorator.isSelected()) {
            this.filter.add(evt.getActionCommand());
        } else {
            this.filter.remove(evt.getActionCommand());
        }
    }//GEN-LAST:event_jCheckBoxDecoratorActionPerformed

    private void jCheckBoxCompositeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxCompositeActionPerformed
        if (jCheckBoxComposite.isSelected()) {
            this.filter.add(evt.getActionCommand());
        } else {
            this.filter.remove(evt.getActionCommand());
        }
    }//GEN-LAST:event_jCheckBoxCompositeActionPerformed

    private void jCheckBoxBridgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxBridgeActionPerformed
        if (jCheckBoxBridge.isSelected()) {
            this.filter.add(evt.getActionCommand());
        } else {
            this.filter.remove(evt.getActionCommand());
        }
    }//GEN-LAST:event_jCheckBoxBridgeActionPerformed

    private void jCheckBoxAdapterCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAdapterCommandActionPerformed
        if (jCheckBoxAdapterCommand.isSelected()) {
            this.filter.add(evt.getActionCommand());
        } else {
            this.filter.remove(evt.getActionCommand());
        }
    }//GEN-LAST:event_jCheckBoxAdapterCommandActionPerformed

    private void jButtonFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFilterActionPerformed
        this.nameDesignPattern.clear();
        this.intersection.clear();
        convertToList();
        this.pageCurrent = 1;
        updatePages();
        update();
    }//GEN-LAST:event_jButtonFilterActionPerformed

    public int toExcel(JTable table, File file) {
        try {
            TableModel model = table.getModel();
            FileWriter excel = new FileWriter(file);

            for (int i = 0; i < model.getColumnCount(); i++) {
                excel.write("\"" + model.getColumnName(i) + "\"" + ",");
            }

            excel.write("\n");

            for (int i = 0; i < intersection.size(); i++) {
                if (this.intersection.get(i) instanceof designpatterns.structure.Type) {
                    designpatterns.structure.Type type = (designpatterns.structure.Type) this.intersection.get(i);
                    excel.write("\"" + type.getName() + "\"" + ",");
                    excel.write("\"" + type.getPack()+ "\"" + ",");
                    excel.write("\"" + nameDesignPattern.get(i)+ "\"" + ",");
                    excel.write("\"" + type.toString()+ "\"" + ",");
                } else {
                    Method method = (Method) this.intersection.get(i);
                    excel.write("\"" + method.getName() + "\"" + ",");
                    excel.write("\"" + method.getOwner().getName()+ "\"" + ",");
                    excel.write("\"" + method.getOwner().getPack()+ "\"" + ",");
                    excel.write("\"" + nameDesignPattern.get(i)+ "\"" + ",");
                    excel.write("\"" + method.getRoleDesignPattern()+ "\"" + ",");
                }
                excel.write("\n");
            }
            excel.write("\n");

            excel.close();

            return 1;
        } catch (IOException e) {
            System.out.println(e);
        }

        return 0;
    }

    private void update() {
        tableResults();
        verifyStateButtons();
        updateHighlighter();
    }

    private void verifyStateButtons() {
        if (this.pageCurrent == this.pages) {
            this.jButtonNext.setEnabled(false);
        } else {
            this.jButtonNext.setEnabled(true);
        }
        if (this.pageCurrent == 1) {
            this.jButtonPrevious.setEnabled(false);
        } else {
            this.jButtonPrevious.setEnabled(true);
        }
    }

    private void tableResults() {
        if (!this.intersection.isEmpty()) {
            DefaultTableModel model = getColumns();
            model = getData(model);
            jTableArtifacts = new JTable();
            jTableArtifacts.setModel(model);
            jTableArtifacts.setShowGrid(true);
            DefaultTableCellRenderer cellRender = new DefaultTableCellRenderer();
            cellRender.setHorizontalAlignment(SwingConstants.CENTER);
            ((DefaultTableCellRenderer) jTableArtifacts.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
            jTableArtifacts.getTableHeader().setReorderingAllowed(false);
            jScrollPane1.setViewportView(jTableArtifacts);
        } else {
            JLabel emptyLabel = new JLabel("There aren't artifacts for this filter!!!");
            emptyLabel.setHorizontalAlignment(SwingConstants.CENTER);
            jScrollPane1.setViewportView(emptyLabel);
        }
    }

    private void changeNameButtonSelect() {
        if (this.selectedAll) {
            this.jButtonSelect.setText("Deselect All");
        } else {
            this.jButtonSelect.setText("Select All");
        }
    }

    private DefaultTableModel getData(DefaultTableModel model) {
        int start = (LIMIT * pageCurrent) - LIMIT;
        int i = 0;
        while (((i + start) < this.intersection.size()) && (i < LIMIT)) {
            if (this.intersection.get(i) instanceof designpatterns.structure.Type) {
                designpatterns.structure.Type type = (designpatterns.structure.Type) this.intersection.get(i + start);
                model.addRow(new Object[0]);
                model.setValueAt(type.getName(), i, 0);
                model.setValueAt(type.getPack(), i, 1);
                model.setValueAt(this.nameDesignPattern.get(i + start), i, 2);
                model.setValueAt(type.toString(), i, 3);
            } else {
                Method method = (Method) this.intersection.get(i + start);
                model.addRow(new Object[0]);
                model.setValueAt(method.getName(), i, 0);
                model.setValueAt(method.getOwner().getName(), i, 1);
                model.setValueAt(method.getOwner().getPack(), i, 2);
                model.setValueAt(this.nameDesignPattern.get(i + start), i, 3);
                model.setValueAt(method.getRoleDesignPattern(), i, 4);
            }
            i++;
        }
        return model;
    }

    private DefaultTableModel getColumns() {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Name");
        if (this.intersection.get(0) instanceof Method) {
            model.addColumn("Class");
        }
        model.addColumn("Package");
        model.addColumn("Design Pattern");
        model.addColumn("Role");
        return model;
    }

    private void updateHighlighter() {
        this.jLabelHighlighter.setText(this.pageCurrent + " of " + this.pages);
    }

    private void updatePages() {
        if (!intersection.isEmpty()) {
            if ((this.intersection.size() % LIMIT) == 0) {
                pages = (this.intersection.size() / LIMIT);
            } else {
                pages = (this.intersection.size() / LIMIT) + 1;
            }
        } else {
            pages = 1;
        }
    }

    private void convertToList() {
        for (String dp : this.filter) {
            if (this.data.getTypeBadSmell().equals(this.properties.getProperty("optionClass"))) {
                this.intersection.addAll(this.data.getIntersectionType().get(dp));
                for (int i = 0; i < this.data.getIntersectionType().get(dp).size(); i++) {
                    this.nameDesignPattern.add(dp);
                }
            } else {
                this.intersection.addAll(this.data.getIntersectionMethod().get(dp));
                for (int i = 0; i < this.data.getIntersectionMethod().get(dp).size(); i++) {
                    this.nameDesignPattern.add(dp);
                }
            }

        }
    }

    private void checkAllChecks(boolean enable) {
        this.jCheckBoxAdapterCommand.setSelected(enable);
        this.jCheckBoxBridge.setSelected(enable);
        this.jCheckBoxComposite.setSelected(enable);
        this.jCheckBoxDecorator.setSelected(enable);
        this.jCheckBoxFactoryMethod.setSelected(enable);
        this.jCheckBoxObserver.setSelected(enable);
        this.jCheckBoxPrototype.setSelected(enable);
        this.jCheckBoxProxy.setSelected(enable);
        this.jCheckBoxProxy2.setSelected(enable);
        this.jCheckBoxSingleton.setSelected(enable);
        this.jCheckBoxStateStrategy.setSelected(enable);
        this.jCheckBoxTemplateMethod.setSelected(enable);
        this.jCheckBoxVisitor.setSelected(enable);
    }

    private void initializeFilter() {
        this.filter = new TreeSet<>();
        this.filter.add("(Object)Adapter-Command");
        this.filter.add("Bridge");
        this.filter.add("Composite");
        this.filter.add("Decorator");
        this.filter.add("Factory Method");
        this.filter.add("Observer");
        this.filter.add("Prototype");
        this.filter.add("Proxy");
        this.filter.add("Proxy2");
        this.filter.add("Singleton");
        this.filter.add("State-Strategy");
        this.filter.add("Template Method");
        this.filter.add("Visitor");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExport;
    private javax.swing.JButton jButtonFilter;
    private javax.swing.JButton jButtonNext;
    private javax.swing.JButton jButtonPrevious;
    private javax.swing.JButton jButtonSelect;
    private javax.swing.JCheckBox jCheckBoxAdapterCommand;
    private javax.swing.JCheckBox jCheckBoxBridge;
    private javax.swing.JCheckBox jCheckBoxComposite;
    private javax.swing.JCheckBox jCheckBoxDecorator;
    private javax.swing.JCheckBox jCheckBoxFactoryMethod;
    private javax.swing.JCheckBox jCheckBoxObserver;
    private javax.swing.JCheckBox jCheckBoxPrototype;
    private javax.swing.JCheckBox jCheckBoxProxy;
    private javax.swing.JCheckBox jCheckBoxProxy2;
    private javax.swing.JCheckBox jCheckBoxSingleton;
    private javax.swing.JCheckBox jCheckBoxStateStrategy;
    private javax.swing.JCheckBox jCheckBoxTemplateMethod;
    private javax.swing.JCheckBox jCheckBoxVisitor;
    private javax.swing.JLabel jLabelHighlighter;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelFilter;
    private javax.swing.JPanel jPanelMain;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableArtifacts;
    // End of variables declaration//GEN-END:variables
    private List<Object> intersection;
    private List<String> nameDesignPattern;
    private TreeSet<String> filter;
    private Data data;
    private Properties properties;
    private boolean selectedAll = true;
    private static final int LIMIT = 20;
    private int pageCurrent = 1;
    private int pages;
}
