/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import designpatterns.config.PropertiesManager;
import java.awt.image.BufferedImage;
import java.util.Properties;
import javax.swing.JLabel;
import org.scilab.forge.jlatexmath.TeXConstants;
import org.scilab.forge.jlatexmath.TeXFormula;
import org.scilab.forge.jlatexmath.TeXIcon;

/**
 *
 * @author bruno
 */
public class AboutEquationsForm extends javax.swing.JFrame {

    /**
     * Creates new form AboutFormulasForm
     */
    public AboutEquationsForm() {
        this.properties = PropertiesManager.getInstance().getProperties();
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle(this.properties.getProperty("titleAbout"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelTitle = new javax.swing.JPanel();
        jLabelAbout = new javax.swing.JLabel();
        jPanelFormulas = new javax.swing.JPanel();
        jLabelSupport = new javax.swing.JLabel();
        jLabelConfidence = new javax.swing.JLabel();
        jLabelLift = new javax.swing.JLabel();
        jLabelConvition = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jLabelAbout.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabelAbout.setText("About Association Rules");

        javax.swing.GroupLayout jPanelTitleLayout = new javax.swing.GroupLayout(jPanelTitle);
        jPanelTitle.setLayout(jPanelTitleLayout);
        jPanelTitleLayout.setHorizontalGroup(
            jPanelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTitleLayout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addComponent(jLabelAbout)
                .addContainerGap(94, Short.MAX_VALUE))
        );
        jPanelTitleLayout.setVerticalGroup(
            jPanelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelAbout, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelFormulas.setBorder(javax.swing.BorderFactory.createTitledBorder("Equations"));

        jLabelSupport.setText("jLabel1");

        jLabelConfidence.setText("jLabel2");

        jLabelLift.setText("jLabel3");

        jLabelConvition.setText("jLabel1");
        loadFormulas();

        javax.swing.GroupLayout jPanelFormulasLayout = new javax.swing.GroupLayout(jPanelFormulas);
        jPanelFormulas.setLayout(jPanelFormulasLayout);
        jPanelFormulasLayout.setHorizontalGroup(
            jPanelFormulasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFormulasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelFormulasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelFormulasLayout.createSequentialGroup()
                        .addComponent(jLabelSupport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelLift))
                    .addGroup(jPanelFormulasLayout.createSequentialGroup()
                        .addComponent(jLabelConfidence)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelConvition)))
                .addContainerGap())
        );
        jPanelFormulasLayout.setVerticalGroup(
            jPanelFormulasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFormulasLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanelFormulasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSupport)
                    .addComponent(jLabelLift))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(jPanelFormulasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelConfidence)
                    .addComponent(jLabelConvition))
                .addGap(25, 25, 25))
        );

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Association rules is a set of metrics emerged in data mining that aims to combine items from a data set, and through that combination, identify patterns of co-occurrence, and abstract a knowledge. To accomplish this combination of items, it is necessary to use some metrics such as: Support [1], Confidence [1], Lift [2] and Conviction [2].\n\nThese metrics are based in the following main concepts: Transaction, defined as a set of items; Antecedent that is an item that appears on the left side of the association rule; and Consequent, an item that appears on the right side of the association rule. Therefore, a basic association rule has the following form: Antecedent ⇒ Consequent.\n\nSupport (sup) of an association rule corresponds to the frequency that an item occurs in a transaction (Equation 1). For instance, let us consider a shopping base in a supermarket. Suppose that there is a data set with 1,000 transactions, which are the set of items that were purchased. In this data set, the items pasta and tomato appear together in 100 records. So, Support for this relationship is 0.1, i.e., 10.0%.\n\nConfidence (conf) expresses the probability of a Consequent occurs since Antecedent has occurred (Equation 2).\n\nIn the aforementioned example, let us consider that the item pasta is found alone in 200 of 1,000 transactions of the data set. To compute the Confidence of the association rule pasta ⇒ tomato, it is necessary to divide the Support of this rule, 0.1, by the Support of pasta – Antecedent in the association rule –, 0.2, resulting in a confidence of 0.5, i.e., 50.0%. Confidence is very sensitive to the frequency on the right side of the association rule, i.e., a very high value in the right side of the association rule can generate a high confidence value, even if the items do not have any type of relation.\n\nTo solve this problem of Confidence, Brin et al. [2] proposed two other metrics for association rule: Lift and Conviction.\n\nThe Lift (lift) consists of a division of Confidence by the consequent, that is, the right side of the rule. This metric indicates how frequent the right side is, since the left side occurs (Equation 3).\n\nNow, let’s consider that the tomato item is found alone in 300 of 1,000 transactions of the data set. So, we have that Support of tomato is 0.3. To compute the Lift of rule pasta ⇒ tomato it is necessary to divide the Confidence of the rule, 0.5, by the Support of tomato– Consequent in the association rule –, 0.3, resulting in a Lift of 1.67. The Lift metric has some thresholds that show what the value obtained indicates. According to Brin et al. [2], when the Lift value is less that 1, the consequent is more frequent in transactions in which the antecedent doesn’t appear. When the Lift value is equals to 1, the consequent appears with the same frequency regardless of whether the antecedent occurs or not. Finally, when the Lift value is greater than 1, antecedent and consequent have relation, being that the greater this value, the greater the relation between both.\n\nThis metric has some thresholds that show what the value obtained indicates. According to Brin et al. [2], when the Lift value is less than 1, the consequent is more frequent in transactions in which the antecedent does not appear. When the Lift value is equal to 1, consequent appears with the same frequency regardless of whether the antecedent occurs or not. Finally, when the value of Lift is greater than 1, antecedent and consequent have relation, being that the greater this value, the greater the relation between both.\n\nConviction (conv) is an alternative metric to Confidence that was proposed with the goal of covering the flaw left by Confidence. This metric uses the Support of both the antecedent and the consequent and may by computed by Equation 4.\n\nLet’s that the Support of tomato, sup(tomato) is 0.3 and the Confidence of rule, conf(pasta ⇒ tomato) is 0.5. Applying these values in the Equation 4, the Conviction conv(pasta ⇒ tomato) is 1.4. When the value of Conviction is 1, it indicates that the antecedent and the consequent don’t have relation at all. When the value of Conviction value is less than 1.0, it indicate that if the antecedent occurs, the consequent tends to doesn’t occurs. When the value of the Conviction is greater than 1, it means that the antecedent and the consequent have relation; the greater the value of Conviction, the greater the relation between the antecedent and the consequent. An infinite result indicates that the antecedent never appears in the transactions.\n\nFor the application of the association rules in the Design Pattern Smell, a transaction represents each class or method, according to granularity of the bad smell that are being analyzed, in the system; antecedent represents a design pattern; consequent represents a bad smell.\n\n\nReferences\n\n[1] R. Agrawal, T. Imielinski, and A. Swami. Mining association rules between sets of items in large databases. SIGMOD Rec., 22(2):207–216, June 1993.\n[2] S. Brin, R. Motwani, J. D. Ullman, and S. Tsur. Dynamic itemset counting and implication rules for market basket data. SIGMOD Rec., 26(2):255–264,June 1997.");
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanelFormulas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelFormulas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void loadFormulas(){
        String mathSupport = this.properties.getProperty("equation1");
        String mathConfidence = this.properties.getProperty("equation2");
        String mathLift = this.properties.getProperty("equation3");
        String mathConviction = this.properties.getProperty("equation4");
        
        TeXFormula formulaSupport = new TeXFormula(mathSupport);
        TeXFormula formulaConfidence = new TeXFormula(mathConfidence);
        TeXFormula formulaLift = new TeXFormula(mathLift);
        TeXFormula formulaConviction = new TeXFormula(mathConviction);
        
        TeXIcon iconSupport = formulaSupport.createTeXIcon(TeXConstants.STYLE_DISPLAY, 15);
        TeXIcon iconConfidence = formulaConfidence.createTeXIcon(TeXConstants.STYLE_DISPLAY, 15);
        TeXIcon iconLift = formulaLift.createTeXIcon(TeXConstants.STYLE_DISPLAY, 15);
        TeXIcon iconConviction = formulaConviction.createTeXIcon(TeXConstants.STYLE_DISPLAY, 15);
        
        BufferedImage bSup = new BufferedImage(iconSupport.getIconWidth(), iconSupport.getIconHeight(), BufferedImage.TYPE_4BYTE_ABGR);
        BufferedImage bConf = new BufferedImage(iconConfidence.getIconWidth(), iconConfidence.getIconHeight(), BufferedImage.TYPE_4BYTE_ABGR);
        BufferedImage bLift = new BufferedImage(iconLift.getIconWidth(), iconLift.getIconHeight(), BufferedImage.TYPE_4BYTE_ABGR);
        BufferedImage bConv = new BufferedImage(iconConviction.getIconWidth(), iconConviction.getIconHeight(), BufferedImage.TYPE_4BYTE_ABGR);
        
        iconSupport.paintIcon(new JLabel(), bSup.getGraphics(), 0, 0);
        iconConfidence.paintIcon(new JLabel(), bConf.getGraphics(), 0, 0);
        iconLift.paintIcon(new JLabel(), bLift.getGraphics(), 0, 0);
        iconConviction.paintIcon(new JLabel(), bConv.getGraphics(), 0, 0);
        
        this.jLabelSupport.setIcon(iconSupport);
        this.jLabelConfidence.setIcon(iconConfidence);
        this.jLabelLift.setIcon(iconLift);
        this.jLabelConvition.setIcon(iconConviction);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelAbout;
    private javax.swing.JLabel jLabelConfidence;
    private javax.swing.JLabel jLabelConvition;
    private javax.swing.JLabel jLabelLift;
    private javax.swing.JLabel jLabelSupport;
    private javax.swing.JPanel jPanelFormulas;
    private javax.swing.JPanel jPanelTitle;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    private Properties properties;
}
